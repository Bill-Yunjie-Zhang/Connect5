{"version":3,"sources":["components/Game.js","components/Box.js","components/CheckWin.js","App.js","serviceWorker.js","index.js"],"names":["style","height","width","fontSize","verticalAlign","Box","props","setId","num","Math","floor","checkHorizontal","gameBoard","lastMove","lastMoveLocation","count","ii","jj","checkVertical","checkNegative","topRange","bottomRange","checkPositive","checkWinner","game","move","id","horizontal","vertical","negative","positve","state","value","onClick","locationArray","winner","handleWin","setState","changeCashe","changeSymbol","resetNum","this","React","Component","CheckWin","color","textAlign","nextMove","border","arr1","push","Game","txt","arr","symbol","squareTaken","createBox","createBoxes","map","refresh","window","location","reload","margin","backgroundColor","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00a3b03a.chunk.js","sourcesContent":["import React from 'react'\r\nimport Box from './Box'\r\nimport CheckWin from './CheckWin'\r\n\r\nconst style = {\r\n    height: 450,\r\n    width: 450,\r\n    border: \"2px solid #333333\"\r\n}\r\n\r\nlet arr1 = []\r\nfor (let ii = 0; ii < 225; ii++){\r\n    arr1.push(ii)\r\n}\r\n\r\nlet num = -1\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            nextMove: \"X\",\r\n            squareTakenr\n            winner: \"\"\r\n        }\r\n    }\r\n\r\n    handleWin = (txt) => {\r\n        this.setState({winner: txt})\r\n    }\r\n\r\n    changeSymbol = () => {\r\n        if (this.state.nextMove === \"X\"){\r\n            this.setState({nextMove: \"O\"})\r\n        } else {\r\n            this.setState({nextMove: \"X\"})\r\n        }\r\n    }\r\n\r\n    changeCashe = (arr, symbol) => {\r\n        let squareTaken1 = this.state.squareTaken\r\n        squareTaken1[arr[0]][arr[1]] = symbol\r\n        // this.setState({squareTaken: squareTaken1})\r\n    }\r\n\r\n    createBox = () => {\r\n        num += 1\r\n        return <Box id={num} resetNum = {this.resetNum} changeCashe={this.changeCashe} move={this.state.nextMove} game={this.state.squareTaken} changeSymbol={this.changeSymbol} handleWin={this.handleWin} winner={this.state.winner}></Box>\r\n    }    \r\n\r\n    resetNum = () => {\r\n        num = -1\r\n    }\r\n\r\n    createBoxes = () => {\r\n        return arr1.map(this.createBox)\r\n    }\r\n\r\n    refresh = () => {\r\n        window.location.reload(false)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width: \"454px\", margin: \"auto\"}}>\r\n                <h1 style={{textAlign: \"center\"}}>Connect 5</h1>\r\n                <div style={style} id=\"board\">\r\n                    {this.createBoxes()}\r\n                </div>\r\n                <CheckWin winner = {this.state.winner} nextMove={this.state.nextMove}></CheckWin>\r\n                <button onClick={this.refresh} style={{textAlign: \"center\", width: \"454px\", height: \"60px\", fontSize: \"30px\", border: \"0px\", backgroundColor: \"#1865f2\", color: \"#ffffff\"}}>Restart</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React from \"react\"\r\n\r\nconst style = {\r\n    height: 30,\r\n    width: 30,\r\n    fontSize: 20,\r\n    verticalAlign: \"top\"\r\n}\r\n\r\nclass Box extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            value: \"\"\r\n        }\r\n    }\r\n\r\n    setId = (num) => {\r\n        let arr = [0, 0]\r\n        arr = [Math.floor(num/15), num%15]\r\n        return arr\r\n    }\r\n    \r\n    checkHorizontal = (gameBoard, lastMove, lastMoveLocation) => {\r\n        let count = 1\r\n\r\n        for(let ii = 1; ii < 15 - lastMoveLocation[1]; ii++){\r\n            if(gameBoard[lastMoveLocation[0]][lastMoveLocation[1] + ii] === lastMove){\r\n                count ++\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        for(let jj = -1; jj > -1 - lastMoveLocation[1]; jj--){\r\n            if(gameBoard[lastMoveLocation[0]][lastMoveLocation[1] + jj] === lastMove){\r\n                count ++\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        if(count === 5){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    checkVertical = (gameBoard, lastMove, lastMoveLocation) => {\r\n        let count = 1\r\n\r\n        for(let ii = 1; ii < 15 - lastMoveLocation[0]; ii++){\r\n            if(gameBoard[lastMoveLocation[0] + ii][lastMoveLocation[1]] === lastMove){\r\n                count ++\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        for(let jj = -1; jj > -1 - lastMoveLocation[0]; jj--){\r\n            if(gameBoard[lastMoveLocation[0] + jj][lastMoveLocation[1]] === lastMove){\r\n                count ++\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        if(count === 5){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    checkNegative = (gameBoard, lastMove, lastMoveLocation) => {\r\n        let count = 1\r\n        let topRange = 0\r\n        let bottomRange = 0\r\n\r\n        if(15 - lastMoveLocation[0] > 15 - lastMoveLocation[1]){\r\n            topRange = 15 - lastMoveLocation[1]\r\n        }else{\r\n            topRange = 15 - lastMoveLocation[0]\r\n        }\r\n\r\n        if(-1 - lastMoveLocation[0] > -1 - lastMoveLocation[1]){\r\n            bottomRange = -1 - lastMoveLocation[0] \r\n        }else{\r\n            bottomRange = -1 - lastMoveLocation[1] \r\n        }\r\n\r\n        for(let ii = 1; ii < topRange; ii++){\r\n            if(gameBoard[lastMoveLocation[0] + ii][lastMoveLocation[1] + ii] === lastMove){\r\n                count ++\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        for(let jj = -1; jj > bottomRange; jj--){\r\n            if(gameBoard[lastMoveLocation[0] + jj][lastMoveLocation[1] + jj] === lastMove){\r\n                count ++\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        if(count === 5){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    checkPositive = (gameBoard, lastMove, lastMoveLocation) => {\r\n        let count = 1\r\n        let topRange = 0\r\n        let bottomRange = 0\r\n\r\n        if(lastMoveLocation[0] > 14 - lastMoveLocation[1]){\r\n            topRange = 14 - lastMoveLocation[1]\r\n        } else {\r\n            topRange = lastMoveLocation[0]\r\n        }\r\n\r\n        if(lastMoveLocation[1] > 14 - lastMoveLocation[0]){\r\n            bottomRange = 14 - lastMoveLocation[0]\r\n        } else {\r\n            bottomRange = lastMoveLocation[1]\r\n        }\r\n\r\n        for(let ii = 1; ii <= topRange; ii ++){\r\n            if(gameBoard[lastMoveLocation[0] - ii][lastMoveLocation[1] + ii] === lastMove){\r\n                count ++\r\n            }else {\r\n                break\r\n            }\r\n        }\r\n\r\n        for(let jj = 1; jj <= bottomRange; jj ++){\r\n            if(gameBoard[lastMoveLocation[0] + jj][lastMoveLocation[1] - jj] === lastMove){\r\n                count ++\r\n            }else {\r\n                break\r\n            }\r\n        }\r\n\r\n        if(count === 5){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    checkWinner = () => {\r\n        let gameBoard = this.props.game\r\n        let lastMove = this.props.move\r\n        let lastMoveLocation = this.setId(this.props.id)\r\n        \r\n        let horizontal = this.checkHorizontal(gameBoard, lastMove, lastMoveLocation)\r\n        let vertical = this.checkVertical(gameBoard, lastMove, lastMoveLocation)\r\n        let negative = this.checkNegative(gameBoard, lastMove, lastMoveLocation)\r\n        let positve = this.checkPositive(gameBoard, lastMove, lastMoveLocation)\r\n\r\n        if(horizontal || vertical || negative || positve){\r\n            return lastMove\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    render () { \r\n        return (\r\n            <button style={style} onClick={() => {\r\n                let locationArray = this.setId(this.props.id)\r\n                if(this.props.game[locationArray[0]][locationArray[1]] === \"\" && (!this.props.winner)){\r\n                    this.props.handleWin(this.checkWinner())\r\n                    this.setState({value: this.props.move})\r\n                    this.props.changeCashe(this.setId(this.props.id), this.props.move)\r\n                    this.props.changeSymbol()\r\n                    this.props.resetNum()\r\n                }\r\n            }}>{this.state.value}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Box","import React from \"react\"\r\n\r\nclass CheckWin extends React.Component {\r\n    render() {\r\n        if (this.props.winner) {\r\n            return <h1 style={{color: \"red\", textAlign: \"center\"}}>{this.props.winner} wins!</h1>\r\n        } else {\r\n            return <h1 style={{textAlign: \"center\"}}>Next Move: {this.props.nextMove}</h1>\r\n        }\r\n    }\r\n}\r\n\r\nexport default CheckWin","import React from 'react';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}